!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	ray.h	/^        vec3 A;$/;"	m	class:ray
B	ray.h	/^        vec3 B;$/;"	m	class:ray
HITABLEH	hitable.h	/^#define HITABLEH$/;"	d
RAYH	ray.h	/^#define RAYH$/;"	d
SPHEREH	sphere.h	/^#define SPHEREH$/;"	d
b	vec3.h	/^    inline float b() const { return e[2]; }$/;"	f	class:vec3
center	sphere.h	/^        vec3 center;$/;"	m	class:sphere
color	main.cpp	/^vec3 color(const ray& r) {$/;"	f
cross	vec3.h	/^inline vec3 cross(const vec3 &v1, const vec3 &v2) {$/;"	f
direction	ray.h	/^        vec3 direction() const { return B; }$/;"	f	class:ray
dot	vec3.h	/^inline float dot(const vec3 &v1, const vec3 &v2) {$/;"	f
e	vec3.h	/^    float e[3];$/;"	m	class:vec3
g	vec3.h	/^    inline float g() const { return e[1]; }$/;"	f	class:vec3
hit	sphere.h	/^bool sphere::hit(const ray& r, float t_min, float t_max, hit_record& rec) const {$/;"	f	class:sphere
hit_record	hitable.h	/^struct hit_record {$/;"	s
hit_sphere	main.cpp	/^float hit_sphere(const vec3& center, float radius, const ray& r) {$/;"	f
hitable	hitable.h	/^class hitable {$/;"	c
length	vec3.h	/^    inline float length() const {$/;"	f	class:vec3
main	main.cpp	/^int main() {$/;"	f
make_unit_vector	vec3.h	/^inline void vec3::make_unit_vector() {$/;"	f	class:vec3
normal	hitable.h	/^    vec3 normal;$/;"	m	struct:hit_record
operator *	vec3.h	/^inline vec3 operator*(const vec3 &v, float t) {$/;"	f
operator *	vec3.h	/^inline vec3 operator*(const vec3 &v1, const vec3 &v2) {$/;"	f
operator *	vec3.h	/^inline vec3 operator*(float t, const vec3 &v) {$/;"	f
operator *=	vec3.h	/^inline vec3& vec3::operator*=(const float t) {$/;"	f	class:vec3
operator *=	vec3.h	/^inline vec3& vec3::operator*=(const vec3 &v) {$/;"	f	class:vec3
operator +	vec3.h	/^    inline const vec3& operator+() const { return *this; }$/;"	f	class:vec3
operator +	vec3.h	/^inline vec3 operator+(const vec3 &v1, const vec3 &v2) {$/;"	f
operator +=	vec3.h	/^inline vec3& vec3::operator+=(const vec3 &v) {$/;"	f	class:vec3
operator -	vec3.h	/^    inline vec3 operator-() { return vec3(-e[0], -e[1], -e[2]); }$/;"	f	class:vec3
operator -	vec3.h	/^inline vec3 operator-(const vec3 &v1, const vec3 &v2) {$/;"	f
operator -=	vec3.h	/^inline vec3& vec3::operator-=(const vec3 &v) {$/;"	f	class:vec3
operator /	vec3.h	/^inline vec3 operator\/(const vec3 &v1, const vec3 &v2) {$/;"	f
operator /	vec3.h	/^inline vec3 operator\/(vec3 v, float t) {$/;"	f
operator /=	vec3.h	/^inline vec3& vec3::operator\/=(const float t) {$/;"	f	class:vec3
operator /=	vec3.h	/^inline vec3& vec3::operator\/=(const vec3 &v) {$/;"	f	class:vec3
operator <<	vec3.h	/^inline std::ostream& operator<<(std::ostream &os, const vec3 &t) {$/;"	f
operator >>	vec3.h	/^inline std::istream& operator>>(std::istream &is, vec3 &t) {$/;"	f
operator []	vec3.h	/^    inline float operator[](int i) const { return e[i]; }$/;"	f	class:vec3
operator []	vec3.h	/^    inline float& operator[](int i) { return e[i]; }$/;"	f	class:vec3
origin	ray.h	/^        vec3 origin() const { return A; }$/;"	f	class:ray
p	hitable.h	/^    vec3 p;$/;"	m	struct:hit_record
point_at_parameter	ray.h	/^        vec3 point_at_parameter(float t) const { return A + t * B; }$/;"	f	class:ray
r	vec3.h	/^    inline float r() const { return e[0]; }$/;"	f	class:vec3
radius	sphere.h	/^        float radius;$/;"	m	class:sphere
ray	ray.h	/^        ray() {}$/;"	f	class:ray
ray	ray.h	/^        ray(const vec3& a, const vec3& b) { A = a; B = b; }$/;"	f	class:ray
ray	ray.h	/^class ray {$/;"	c
sphere	sphere.h	/^        sphere() {}$/;"	f	class:sphere
sphere	sphere.h	/^        sphere(vec3 cen, float r) : center(cen), radius(r) {};$/;"	f	class:sphere
sphere	sphere.h	/^class sphere : public hitable {$/;"	c
squared_length	vec3.h	/^    inline float squared_length() const {$/;"	f	class:vec3
t	hitable.h	/^    float t;$/;"	m	struct:hit_record
unit_vector	vec3.h	/^inline vec3 unit_vector(vec3 v) {$/;"	f
vec3	vec3.h	/^    vec3() {}$/;"	f	class:vec3
vec3	vec3.h	/^    vec3(float e0, float e1, float e2) { e[0] = e0; e[1] = e1; e[2] = e2; }$/;"	f	class:vec3
vec3	vec3.h	/^class vec3  {$/;"	c
x	vec3.h	/^    inline float x() const { return e[0]; }$/;"	f	class:vec3
y	vec3.h	/^    inline float y() const { return e[1]; }$/;"	f	class:vec3
z	vec3.h	/^    inline float z() const { return e[2]; }$/;"	f	class:vec3
